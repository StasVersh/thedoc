//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/ProjectAssets/Resources/InputMeneger.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMeneger : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMeneger()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMeneger"",
    ""maps"": [
        {
            ""name"": ""PlayerInput"",
            ""id"": ""19d977bd-7a5e-43cb-8f43-f43cc16a65c2"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""6d7bc73f-d6bf-49ee-82fd-36d4d5ce1531"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8047579e-7f46-41f3-b576-0069654e1e07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""fbe45fa9-08ab-4904-9939-b334fc21d362"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hover"",
                    ""type"": ""Button"",
                    ""id"": ""5c14c2a3-fc58-46e4-bfb5-7bfe46100860"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnUpHold"",
                    ""type"": ""Button"",
                    ""id"": ""1f486f7f-5322-495c-8451-862af3f462ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnDownHold"",
                    ""type"": ""Button"",
                    ""id"": ""d12cfd65-a949-4e87-b564-7198508e9620"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""98c8f9bd-d35f-4671-9ffe-189de04c3b8e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""11ada860-aac8-429e-9dbd-5f61cc27ec26"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""36a82fea-bc0c-424d-81d6-56762ac928af"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5d52bc98-2a84-492d-8cd6-d7166924f0c5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0d48c07f-daff-487c-a5e2-b0b8acf9c7a1"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f85a470-e9e5-4052-bb58-30ee0fc187b8"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c638279-38a4-4ab4-a3be-f136619666c2"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnUpHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f4072ed-ee87-44c4-8ee2-980cee047a6f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnDownHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerInput
        m_PlayerInput = asset.FindActionMap("PlayerInput", throwIfNotFound: true);
        m_PlayerInput_Movement = m_PlayerInput.FindAction("Movement", throwIfNotFound: true);
        m_PlayerInput_Jump = m_PlayerInput.FindAction("Jump", throwIfNotFound: true);
        m_PlayerInput_Dash = m_PlayerInput.FindAction("Dash", throwIfNotFound: true);
        m_PlayerInput_Hover = m_PlayerInput.FindAction("Hover", throwIfNotFound: true);
        m_PlayerInput_OnUpHold = m_PlayerInput.FindAction("OnUpHold", throwIfNotFound: true);
        m_PlayerInput_OnDownHold = m_PlayerInput.FindAction("OnDownHold", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInput
    private readonly InputActionMap m_PlayerInput;
    private IPlayerInputActions m_PlayerInputActionsCallbackInterface;
    private readonly InputAction m_PlayerInput_Movement;
    private readonly InputAction m_PlayerInput_Jump;
    private readonly InputAction m_PlayerInput_Dash;
    private readonly InputAction m_PlayerInput_Hover;
    private readonly InputAction m_PlayerInput_OnUpHold;
    private readonly InputAction m_PlayerInput_OnDownHold;
    public struct PlayerInputActions
    {
        private @InputMeneger m_Wrapper;
        public PlayerInputActions(@InputMeneger wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerInput_Movement;
        public InputAction @Jump => m_Wrapper.m_PlayerInput_Jump;
        public InputAction @Dash => m_Wrapper.m_PlayerInput_Dash;
        public InputAction @Hover => m_Wrapper.m_PlayerInput_Hover;
        public InputAction @OnUpHold => m_Wrapper.m_PlayerInput_OnUpHold;
        public InputAction @OnDownHold => m_Wrapper.m_PlayerInput_OnDownHold;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerInputActions instance)
        {
            if (m_Wrapper.m_PlayerInputActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnJump;
                @Dash.started -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnDash;
                @Hover.started -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnHover;
                @Hover.performed -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnHover;
                @Hover.canceled -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnHover;
                @OnUpHold.started -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnOnUpHold;
                @OnUpHold.performed -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnOnUpHold;
                @OnUpHold.canceled -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnOnUpHold;
                @OnDownHold.started -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnOnDownHold;
                @OnDownHold.performed -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnOnDownHold;
                @OnDownHold.canceled -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnOnDownHold;
            }
            m_Wrapper.m_PlayerInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @Hover.started += instance.OnHover;
                @Hover.performed += instance.OnHover;
                @Hover.canceled += instance.OnHover;
                @OnUpHold.started += instance.OnOnUpHold;
                @OnUpHold.performed += instance.OnOnUpHold;
                @OnUpHold.canceled += instance.OnOnUpHold;
                @OnDownHold.started += instance.OnOnDownHold;
                @OnDownHold.performed += instance.OnOnDownHold;
                @OnDownHold.canceled += instance.OnOnDownHold;
            }
        }
    }
    public PlayerInputActions @PlayerInput => new PlayerInputActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerInputActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnHover(InputAction.CallbackContext context);
        void OnOnUpHold(InputAction.CallbackContext context);
        void OnOnDownHold(InputAction.CallbackContext context);
    }
}
